service: aws-lambda-node
frameworkVersion: '3'

custom:
  tableName: taskTable
  imageBucketName: my-image-bucket-dev-demo

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    imageBucketName: ${self:custom.imageBucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - S3:*
      Resource: '*'

functions:
  hello:
    handler: src/handler.hello
    events:
      - httpApi:
          path: /
          method: get
  createTask:
    handler: src/controller/TaskController.addTask
    events:
      - httpApi:
          path: /task
          method: post
  showTasks:
    handler: src/controller/TaskController.getTasks
    events:
      - httpApi:
          path: /task
          method: get
  showTask:
    handler: src/controller/TaskController.getTaskById
    events:
      - httpApi:
          path: /task/{id}
          method: get
  editTask:
    handler: src/controller/TaskController.putTask
    events:
      - httpApi:
          path: /task/{id}
          method: put
  delTask:
    handler: src/controller/TaskController.deleteTask
    events:
      - httpApi:
          path: /task/{id}
          method: delete
  saveImage:
    handler: src/controller/ImageController.uploadImage
    events:
      - httpApi:
          path: /Image
          method: post

resources:
  Resources:
    ImageBucketDev:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageBucketName}
        AccessControl: PublicRead
    TaskTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
